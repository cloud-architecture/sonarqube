<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.qualityprofile.QualityProfileMapper">

  <sql id="profilesColumns">
    p.id as id,
    p.organization_uuid as organizationUuid,
    p.kee as kee,
    p.name as name,
    p.language as language,
    p.parent_kee as parentKee,
    p.created_at as createdAt,
    p.updated_at as updatedAt,
    p.rules_updated_at as rulesUpdatedAt,
    p.last_used as lastUsed,
    p.user_updated_at as userUpdatedAt,
    p.is_built_in as isBuiltIn
  </sql>

  <insert id="insert" parameterType="RulesProfile" keyColumn="id" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO rules_profiles (organization_uuid, kee, parent_kee, name, language, created_at, updated_at, rules_updated_at, last_used, user_updated_at, is_built_in)
    VALUES (
    #{organizationUuid, jdbcType=VARCHAR},
    #{kee, jdbcType=VARCHAR},
    #{parentKee, jdbcType=VARCHAR},
    #{name, jdbcType=VARCHAR},
    #{language, jdbcType=VARCHAR},
    #{createdAt, jdbcType=TIMESTAMP},
    #{updatedAt, jdbcType=TIMESTAMP},
    #{rulesUpdatedAt, jdbcType=VARCHAR},
    #{lastUsed, jdbcType=BIGINT},
    #{userUpdatedAt, jdbcType=BIGINT},
    #{isBuiltIn, jdbcType=BOOLEAN}
    )
  </insert>

  <update id="update" parameterType="RulesProfile">
    UPDATE rules_profiles SET
    name=#{name, jdbcType=VARCHAR},
    language=#{language, jdbcType=VARCHAR},
    parent_kee=#{parentKee, jdbcType=VARCHAR},
    updated_at=#{updatedAt, jdbcType=TIMESTAMP},
    rules_updated_at=#{rulesUpdatedAt, jdbcType=VARCHAR},
    last_used=#{lastUsed, jdbcType=BIGINT},
    user_updated_at=#{userUpdatedAt, jdbcType=BIGINT},
    is_built_in=#{isBuiltIn, jdbcType=BOOLEAN}
    WHERE id=#{id}
  </update>

  <update id="deleteByKeys" parameterType="String">
    delete from rules_profiles
    where kee in
      <foreach collection="profileKeys" open="(" close=")" item="profileKey" separator=",">#{profileKey, jdbcType=VARCHAR}</foreach>
  </update>

  <select id="selectAll" parameterType="map" resultType="RulesProfile">
    SELECT
    <include refid="profilesColumns"/>
    FROM rules_profiles p
    WHERE p.organization_uuid = #{organizationUuid,jdbcType=VARCHAR}
    ORDER BY p.name, p.language
  </select>

  <select id="selectByNameAndLanguage" parameterType="map" resultType="RulesProfile">
    SELECT
    <include refid="profilesColumns"/>
    FROM rules_profiles p
    WHERE p.name=#{name, jdbcType=VARCHAR}
    AND p.language=#{language, jdbcType=VARCHAR}
    <if test="organizationUuid != null">
      AND p.organization_uuid = #{organizationUuid, jdbcType=VARCHAR}
    </if>
  </select>

  <select id="selectByNameAndLanguages" parameterType="map" resultType="RulesProfile">
    SELECT
    <include refid="profilesColumns"/>
    FROM rules_profiles p
    WHERE p.name=#{name, jdbcType=VARCHAR}
    AND p.language IN <foreach collection="languages" open="(" close=")" item="language" separator=",">#{language, jdbcType=VARCHAR}</foreach>
    AND p.organization_uuid = #{organizationUuid, jdbcType=VARCHAR}
  </select>

  <select id="selectByKey" parameterType="string" resultType="RulesProfile">
    SELECT
    <include refid="profilesColumns"/>
    FROM rules_profiles p
    WHERE p.kee=#{id}
  </select>

  <select id="selectByKeys" parameterType="string" resultType="RulesProfile">
    SELECT
    <include refid="profilesColumns"/>
    FROM rules_profiles p
    WHERE p.kee in
    <foreach collection="keys" open="(" close=")" item="key" separator=",">
      #{key}
    </foreach>
  </select>

  <select id="selectByLanguage" parameterType="String" resultType="RulesProfile">
    SELECT
    <include refid="profilesColumns"/>
    FROM rules_profiles p
    WHERE p.language=#{language}
    AND p.organization_uuid = #{organizationUuid, jdbcType=VARCHAR}
    ORDER BY p.name
  </select>

  <select id="selectChildren" parameterType="string" resultType="RulesProfile">
    SELECT
    <include refid="profilesColumns"/>
    FROM rules_profiles p
    WHERE p.parent_kee=#{id}
    ORDER BY p.name
  </select>

  <select id="selectDefaultProfile" parameterType="map" resultType="RulesProfile">
    SELECT
    <include refid="profilesColumns"/>
    FROM rules_profiles p
    INNER JOIN default_qprofiles dp on p.kee=dp.qprofile_uuid
    WHERE
    dp.language=#{language, jdbcType=VARCHAR}
    AND dp.organization_uuid = #{organizationUuid, jdbcType=VARCHAR}
  </select>

  <select id="selectDefaultProfiles" parameterType="map" resultType="RulesProfile">
    SELECT
    <include refid="profilesColumns"/>
    FROM rules_profiles p
    INNER JOIN default_qprofiles dp on p.kee=dp.qprofile_uuid
    WHERE
    dp.language in <foreach collection="languages" open="(" close=")" item="language" separator=",">#{language, jdbcType=VARCHAR}</foreach>
    AND dp.organization_uuid = #{organizationUuid, jdbcType=VARCHAR}
  </select>

  <select id="selectSelectedProjects" resultType="org.sonar.db.qualityprofile.ProjectQprofileAssociationDto">
    SELECT pp.id as id, pj.id as projectId, pj.uuid as projectUuid, pj.kee as projectKey, pj.name as projectName, pp.profile_key as profileKey
    FROM projects pj
    JOIN project_qprofiles pp ON pp.project_uuid = pj.uuid
    AND pp.profile_key = #{profileKey, jdbcType=VARCHAR}
    WHERE pj.scope='PRJ' AND pj.qualifier='TRK'
      AND UPPER(pj.name) LIKE #{nameQuery, jdbcType=VARCHAR}
      AND pj.organization_uuid = #{organizationUuid, jdbcType=VARCHAR}
    ORDER BY pj.name ASC
  </select>

  <select id="selectDeselectedProjects" resultType="org.sonar.db.qualityprofile.ProjectQprofileAssociationDto">
    SELECT pp.id as id, pj.id as projectId, pj.uuid as projectUuid, pj.kee as projectKey, pj.name as projectName, pp.profile_key as profileKey
    FROM projects pj
    LEFT JOIN project_qprofiles pp ON pp.project_uuid = pj.uuid
    AND pp.profile_key = #{profileKey, jdbcType=VARCHAR}
    WHERE pj.scope='PRJ' AND pj.qualifier='TRK'
      AND UPPER(pj.name) LIKE #{nameQuery, jdbcType=VARCHAR}
      AND pp.profile_key IS NULL
      AND pj.organization_uuid = #{organizationUuid, jdbcType=VARCHAR}
    ORDER BY pj.name ASC
  </select>

  <select id="selectProjectAssociations" resultType="org.sonar.db.qualityprofile.ProjectQprofileAssociationDto">
    SELECT pp.id as id, pj.id as projectId, pj.uuid as projectUuid, pj.kee as projectKey, pj.name as projectName, pp.profile_key as profileKey
    FROM projects pj
    LEFT JOIN project_qprofiles pp ON pp.project_uuid = pj.uuid
    AND pp.profile_key = #{profileKey, jdbcType=VARCHAR}
    WHERE pj.scope='PRJ' AND pj.qualifier='TRK'
      AND UPPER(pj.name) LIKE #{nameQuery, jdbcType=VARCHAR}
      AND pj.organization_uuid = #{organizationUuid, jdbcType=VARCHAR}
    ORDER BY pj.name ASC
  </select>

  <select id="countProjectsByProfileKey" resultType="KeyLongValue" parameterType="map">
    select pp.profile_key as "key", count(projects.id) as "value"
    from projects projects
    inner join project_qprofiles pp ON pp.project_uuid = projects.uuid
    inner join rules_profiles prof ON pp.profile_key = prof.kee
    where projects.enabled = ${_true}
    and prof.organization_uuid = #{organizationUuid, jdbcType=VARCHAR}
    group by pp.profile_key
  </select>

  <select id="selectByProjectAndLanguage" parameterType="map" resultType="RulesProfile">
    SELECT
    <include refid="profilesColumns"/>
    FROM rules_profiles p
    JOIN project_qprofiles pp ON pp.profile_key=p.kee
    JOIN projects project ON pp.project_uuid=project.uuid AND project.kee=#{projectKey}
    WHERE p.language=#{language}
  </select>

  <select id="selectByProjectAndLanguages" parameterType="map" resultType="RulesProfile">
    SELECT
    <include refid="profilesColumns"/>
    FROM rules_profiles p
    JOIN project_qprofiles pp ON pp.profile_key=p.kee
    JOIN projects project ON pp.project_uuid=project.uuid AND project.kee=#{projectKey, jdbcType=VARCHAR}
    JOIN organizations org ON project.organization_uuid = org.uuid AND p.organization_uuid = org.uuid
    WHERE p.language in <foreach collection="languages" open="(" close=")" item="language" separator=",">#{language, jdbcType=VARCHAR}</foreach>
    AND org.uuid = #{organizationUuid, jdbcType=VARCHAR}
  </select>

  <insert id="insertProjectProfileAssociation" keyColumn="id" useGeneratedKeys="true">
    INSERT INTO project_qprofiles (project_uuid, profile_key)
    VALUES (#{projectUuid, jdbcType=VARCHAR}, #{profileKey, jdbcType=VARCHAR})
  </insert>

  <update id="updateProjectProfileAssociation">
    UPDATE project_qprofiles
    SET profile_key=#{profileKey, jdbcType=VARCHAR}
    WHERE project_uuid=#{projectUuid, jdbcType=VARCHAR} AND profile_key=#{oldProfileKey, jdbcType=VARCHAR}
  </update>

  <update id="deleteProjectProfileAssociation">
    DELETE FROM project_qprofiles
    WHERE project_uuid=#{projectUuid, jdbcType=VARCHAR} AND profile_key=#{profileKey, jdbcType=VARCHAR}
  </update>

  <update id="deleteProjectAssociationByProfileKeys" parameterType="String">
    delete from project_qprofiles
    where profile_key in
    <foreach collection="profileKeys" open="(" close=")" item="profileKey" separator=",">
      #{profileKey, jdbcType=VARCHAR}
    </foreach>
  </update>

  <select id="selectOutdatedProfiles" parameterType="map" resultType="string">
    select rp.kee
    from rules_profiles rp
    inner join organizations o on o.uuid = rp.organization_uuid
    where rp.language = #{language, jdbcType=VARCHAR}
      and rp.name = #{name, jdbcType=VARCHAR}
      and rp.is_built_in = ${_false}
  </select>

  <update id="rename" parameterType="map">
    update rules_profiles
    set
      name = #{newName, jdbcType=VARCHAR},
      updated_at = #{updatedAt, jdbcType=TIMESTAMP}
    where kee in <foreach collection="profileKeys" open="(" close=")" item="profileKey" separator=",">#{profileKey, jdbcType=VARCHAR}</foreach>
  </update>
</mapper>

